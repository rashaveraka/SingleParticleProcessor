// @(#)root/graf2d:$Id$
// Author: Timur Pocheptsov, 14/8/2011

/*************************************************************************
 * Copyright (C) 1995-2011, Rene Brun and Fons Rademakers.               *
 * All rights reserved.                                                  *
 *                                                                       *
 * For the licensing terms see $ROOTSYS/LICENSE.                         *
 * For the list of contributors see $ROOTSYS/README/CREDITS.             *
 *************************************************************************/

#include "IOSPadStub.h"

namespace ROOT {
namespace iOS {

////////////////////////////////////////////////////////////////////////////////

TLegend *PadStub::BuildLegend(Double_t, Double_t, Double_t, Double_t, const char *)
{
   return 0;
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::Close(Option_t *)
{
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::AddExec(const char *, const char *)
{
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::CopyPixmap()
{
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::CopyPixmaps()
{
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::DeleteExec(const char *)
{
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::Divide(Int_t, Int_t, Float_t, Float_t, Int_t)
{
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::Draw(Option_t *)
{
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::DrawClassObject(const TObject *, Option_t *)
{
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::SetBatch(Bool_t)
{
}

////////////////////////////////////////////////////////////////////////////////

Int_t PadStub::GetCanvasID() const
{
   return 0;
}

////////////////////////////////////////////////////////////////////////////////

TCanvasImp *PadStub::GetCanvasImp() const
{
   return 0;
}

////////////////////////////////////////////////////////////////////////////////

Int_t PadStub::GetEvent() const
{
   return 0;
}

////////////////////////////////////////////////////////////////////////////////

Int_t PadStub::GetEventX() const
{
   return 0;
}

////////////////////////////////////////////////////////////////////////////////

Int_t PadStub::GetEventY() const
{
   return 0;
}

////////////////////////////////////////////////////////////////////////////////

Int_t PadStub::GetNumber() const
{
   return 0;
}

////////////////////////////////////////////////////////////////////////////////

TVirtualPad *PadStub::GetPad(Int_t) const
{
   return 0;
}

////////////////////////////////////////////////////////////////////////////////

TObject *PadStub::GetPadPointer() const
{
   return 0;
}

////////////////////////////////////////////////////////////////////////////////

TVirtualPad *PadStub::GetPadSave() const
{
   return 0;
}

////////////////////////////////////////////////////////////////////////////////

TVirtualPad *PadStub::GetSelectedPad() const
{
   return 0;
}

////////////////////////////////////////////////////////////////////////////////

TObject *PadStub::GetView3D() const
{
   return 0;
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::ResetView3D(TObject *)
{
}

////////////////////////////////////////////////////////////////////////////////

TCanvas *PadStub::GetCanvas() const
{
   return 0;
}

////////////////////////////////////////////////////////////////////////////////

TVirtualPad *PadStub::GetVirtCanvas() const
{
   return 0;
}

////////////////////////////////////////////////////////////////////////////////

Int_t PadStub::GetPadPaint() const
{
   return 0;
}

////////////////////////////////////////////////////////////////////////////////

Int_t PadStub::GetPixmapID() const
{
   return 0;
}

////////////////////////////////////////////////////////////////////////////////

Bool_t PadStub::HasCrosshair() const
{
   return kFALSE;
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::SetCrosshair(Int_t)
{
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::SetAttFillPS(Color_t, Style_t)
{
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::SetAttLinePS(Color_t, Style_t, Width_t)
{
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::SetAttMarkerPS(Color_t, Style_t, Size_t)
{
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::SetAttTextPS(Int_t, Float_t, Color_t, Style_t, Float_t)
{
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::PaintText(Double_t, Double_t, const wchar_t *)
{
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::PaintTextNDC(Double_t, Double_t, const wchar_t *)
{
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::PaintBorderPS(Double_t, Double_t, Double_t, Double_t, Int_t, Int_t, Int_t, Int_t)
{
}

////////////////////////////////////////////////////////////////////////////////

Int_t PadStub::GetGLDevice()
{
   return 0;
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::SetCopyGLDevice(Bool_t)
{
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::Pop()
{
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::Print(const char *) const
{
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::Print(const char *, Option_t *)
{
}

////////////////////////////////////////////////////////////////////////////////

TVirtualPad *PadStub::GetMother() const
{
   return 0;
}

////////////////////////////////////////////////////////////////////////////////

TObject *PadStub::CreateToolTip(const TBox *, const char *, Long_t)
{
   return 0;
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::DeleteToolTip(TObject *)
{
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::ResetToolTip(TObject *)
{
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::CloseToolTip(TObject *)
{
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::SetToolTipText(const char *, Long_t)
{
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::HighLight(Color_t, Bool_t)
{
}

////////////////////////////////////////////////////////////////////////////////

Color_t PadStub::GetHighLightColor() const
{
   return 0;
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::ls(Option_t *) const
{
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::Modified(Bool_t)
{
}

////////////////////////////////////////////////////////////////////////////////

Bool_t PadStub::OpaqueMoving() const
{
   return kFALSE;
}

////////////////////////////////////////////////////////////////////////////////

Bool_t PadStub::OpaqueResizing() const
{
   return kFALSE;
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::PaintModified()
{
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::RecursiveRemove(TObject *)
{
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::SaveAs(const char *,Option_t *) const
{
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::SetCanvas(TCanvas *)
{
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::SetCanvasSize(UInt_t, UInt_t)
{
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::SetCursor(ECursor)
{
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::SetDoubleBuffer(Int_t)
{
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::SetName(const char *)
{
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::SetTitle(const char *)
{
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::SetSelected(TObject *)
{
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::ShowGuidelines(TObject *, Int_t, char, bool)
{
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::Update()
{
}

////////////////////////////////////////////////////////////////////////////////

TObject *PadStub::WaitPrimitive(const char *, const char *)
{
   return 0;
}

////////////////////////////////////////////////////////////////////////////////

void PadStub::ReleaseViewer3D(Option_t *)
{
}

////////////////////////////////////////////////////////////////////////////////

Bool_t PadStub::HasViewer3D() const
{
   return kFALSE;
}

////////////////////////////////////////////////////////////////////////////////

TVirtualPadPainter *PadStub::GetPainter()
{
   return 0;
}

}
}
